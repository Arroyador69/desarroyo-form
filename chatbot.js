// DesArroyo.Tech - Chatbot "Aura"
// Este archivo contendr√° toda la l√≥gica para nuestro chatbot de ayuda.

// 1. Base de Conocimiento (Knowledge Base)
// Aqu√≠ definimos las preguntas y respuestas que el chatbot conocer√°.
// Usamos "palabras clave" para que sea m√°s flexible.

const knowledgeBase = [
    {
        keywords: ["hola", "saludos", "buenas"],
        answer: "¬°Hola! Soy Aura, tu asistente personal de DesArroyo.Tech. Estoy aqu√≠ para ayudarte con tus dudas sobre automatizaciones, desarrollo web y c√≥mo dar vida a tus ideas. ¬øEn qu√© puedo ayudarte?"
    },
    {
        keywords: ["n8n", "que es"],
        answer: "n8n es una herramienta de automatizaci√≥n de flujos de trabajo de c√≥digo abierto. Te permite conectar diferentes aplicaciones y servicios para que trabajen juntos sin necesidad de escribir c√≥digo. ¬°Es como tener superpoderes para tus tareas diarias!"
    },
    {
        keywords: ["instalo", "importar", "flujo", "json"],
        answer: "Es muy f√°cil. Para instalar tu flujo, ve a tu panel de n8n, haz clic en 'Add workflow' y luego en 'Import from file'. Selecciona el archivo .json que generaste aqu√≠ y ¬°listo para configurar!"
    },
    {
        keywords: ["credenciales", "conectar", "api", "clave"],
        answer: "Las credenciales son las 'llaves' que permiten a n8n acceder a tus apps (como Gmail o Telegram). En cada nodo de n8n, ver√°s un campo 'Credential'. Haz clic en 'Create New' y sigue los pasos para conectar tu cuenta."
    },
    {
        keywords: ["cuanto", "cuesta", "tiempo", "web", "personalizada"],
        answer: "Una web 100% personalizada es un proyecto √∫nico. El coste y tiempo dependen de la complejidad, pero para darte una idea, una web est√°tica como la que se describe en la p√°gina de inicio puede estar lista en 48 horas a un precio muy competitivo. Para proyectos m√°s grandes (con Astro, bases de datos, etc.), lo mejor es que nos escribas a <strong>alberto@desarroyo.tech</strong> para darte un presupuesto a medida. ¬°Nos encanta escuchar nuevas ideas!"
    },
    {
        keywords: ["servicios", "ofrecen"],
        answer: "Ofrecemos un abanico de soluciones: webs HTML ultrarr√°pidas, webs full-stack con Astro, bots para WhatsApp/Telegram, automatizaciones con IA, soluciones para check-in de alojamientos tur√≠sticos ¬°y mucho m√°s! Puedes ver la lista completa en la secci√≥n '¬øQu√© ofrecemos?' de la p√°gina de inicio."
    },
    {
        keywords: ["quien", "detras", "alberto"],
        answer: "Detr√°s de DesArroyo.Tech est√° <strong>Alberto Arroyo</strong>, un actor, escritor y artesano del c√≥digo que fusiona su pasi√≥n por la narrativa con la tecnolog√≠a para crear soluciones con alma. Puedes conocerle mejor en la secci√≥n 'Detr√°s del c√≥digo' de la p√°gina de inicio."
    },
    {
        keywords: ["otra", "automatizacion", "no esta", "generador"],
        answer: "¬°Por supuesto! El generador es un punto de partida. Si tienes una necesidad de automatizaci√≥n m√°s compleja o espec√≠fica, cont√°ctanos en <strong>alberto@desarroyo.tech</strong>. Nos encantan los retos y crear soluciones a medida."
    },
    {
        keywords: ["superpoderes", "ejemplos", "ideas"],
        answer: "¬°Claro! Aqu√≠ tienes algunos 'superpoderes' que puedes conseguir con n8n: <br>1. <strong>Sincronizaci√≥n autom√°tica:</strong> Guarda los archivos adjuntos de tus emails de Gmail directamente en Google Drive. <br>2. <strong>Notificador inteligente:</strong> Recibe un mensaje en Telegram cada vez que alguien complete tu formulario de Typeform. <br>3. <strong>Reportes autom√°ticos:</strong> Crea un resumen diario de las ventas de Stripe y env√≠alo a una hoja de Google Sheets."
    },
    {
        keywords: ["gracias", "adios", "chau"],
        answer: "¬°De nada! Si tienes m√°s preguntas, no dudes en consultarme. ¬°Felices automatizaciones!"
    }
];

// 2. L√≥gica del Chatbot

// Variables globales para el estado del usuario
let userLimitInfo = {
    remainingQueries: 10,
    isPremium: false,
    totalQueries: 0
};
let chatBody; // Variable global para el cuerpo del chat

// Funci√≥n para cargar el l√≠mite de consultas del usuario
async function loadUserLimit() {
    try {
        const response = await fetch('/api/query-limit');
        if (response.ok) {
            userLimitInfo = await response.json();
            updateLimitDisplay();
        }
    } catch (error) {
        console.error('Error cargando l√≠mite de usuario:', error);
    }
}

// Funci√≥n para actualizar la visualizaci√≥n del l√≠mite
function updateLimitDisplay() {
    const limitDisplay = document.getElementById('limit-display');
    if (limitDisplay) {
        if (userLimitInfo.isPremium) {
            limitDisplay.innerHTML = 'üíé <strong>Premium</strong> - Consultas ilimitadas';
            limitDisplay.className = 'limit-display premium';
        } else {
            limitDisplay.innerHTML = `üî¢ Consultas restantes: <strong>${userLimitInfo.remainingQueries}</strong>`;
            limitDisplay.className = 'limit-display';
        }
    }
}

// Funci√≥n para crear sesi√≥n de pago con Stripe
async function createPaymentSession() {
    try {
        const response = await fetch('/api/create-payment-session', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });

        if (!response.ok) {
            throw new Error('Error creando sesi√≥n de pago');
        }

        const { sessionId } = await response.json();
        
        // Redirigir a Stripe Checkout
        const stripe = Stripe('pk_live_51RGg0AGayGuUgznnZ1FfHOEfSlHEdiSAhSGKO41ckEowveEs4aojJVdEcrx3MpJUp4dmfLeZ84ybN9iCe5ClzU3p00bKSWKKWR'); // Tu Stripe publishable key
        stripe.redirectToCheckout({
            sessionId: sessionId
        });

    } catch (error) {
        console.error('Error creando sesi√≥n de pago:', error);
        alert('Error procesando el pago. Por favor, intenta de nuevo.');
    }
}

// Funci√≥n para confirmar pago exitoso
async function confirmPayment(sessionId) {
    try {
        const response = await fetch('/api/confirm-payment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ sessionId })
        });

        if (response.ok) {
            const result = await response.json();
            if (result.success) {
                userLimitInfo.isPremium = true;
                userLimitInfo.remainingQueries = '‚àû';
                updateLimitDisplay();
                
                // Mostrar mensaje de √©xito
                addMessage(`üéâ ¬°Pago confirmado! Ya tienes acceso premium a Aura.\n\nüì± √önete a nuestro grupo de Telegram exclusivo: ${result.telegramLink}`, 'bot-message', true);
                
                // Limpiar URL
                window.history.replaceState({}, document.title, window.location.pathname);
            }
        }
    } catch (error) {
        console.error('Error confirmando pago:', error);
    }
}

// Funci√≥n para obtener respuestas del chatbot con DeepSeek
async function getBotAnswer(userInput) {
    try {
        // Determinar el contexto basado en la pregunta
        let context = 'general';
        const lowerInput = userInput.toLowerCase();
        
        if (lowerInput.includes('precio') || lowerInput.includes('cuesta') || lowerInput.includes('coste')) {
            context = 'precios';
        } else if (lowerInput.includes('n8n') || lowerInput.includes('flujo') || lowerInput.includes('automatizaci√≥n') || lowerInput.includes('instalar')) {
            context = 'tecnico';
        }

        // Llamada al servidor
        const response = await fetch('/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: userInput,
                context: context
            })
        });

        if (!response.ok) {
            throw new Error('Error en la respuesta del servidor');
        }

        const data = await response.json();
        
        // Actualizar informaci√≥n del usuario
        if (data.success) {
            userLimitInfo.remainingQueries = data.remainingQueries;
            userLimitInfo.isPremium = data.isPremium;
            userLimitInfo.totalQueries = data.totalQueries;
            updateLimitDisplay();
            return data.response;
        } else {
            // Si hay error o l√≠mite alcanzado
            if (data.limitReached) {
                // Mostrar bot√≥n de pago
                setTimeout(() => {
                    showPaymentButton();
                }, 1000);
            }
            return data.response || getFallbackResponse(userInput);
        }

    } catch (error) {
        console.error('Error al obtener respuesta del chatbot:', error);
        return getFallbackResponse(userInput);
    }
}

// Funci√≥n para mostrar bot√≥n de pago
function showPaymentButton() {
    const paymentButton = document.createElement('button');
    paymentButton.className = 'payment-btn';
    paymentButton.innerHTML = 'üíé Unirme a DesArroyo.Tech Hub - 9,99‚Ç¨/mes';
    paymentButton.onclick = createPaymentSession;
    
    const chatBody = document.getElementById('chat-body');
    chatBody.appendChild(paymentButton);
    chatBody.scrollTop = chatBody.scrollHeight;
}

// Respuestas de fallback (mantener las existentes como respaldo)
function getFallbackResponse(userInput) {
    const lowerInput = userInput.toLowerCase();
    
    // Respuestas espec√≠ficas para preguntas comunes
    if (lowerInput.includes('precio') || lowerInput.includes('cuesta') || lowerInput.includes('coste')) {
        return "Los precios var√≠an seg√∫n la complejidad del proyecto. Para una cotizaci√≥n personalizada, contacta con alberto@desarroyo.tech. ¬°Cada proyecto es √∫nico! üí∞";
    }
    
    if (lowerInput.includes('n8n') || lowerInput.includes('flujo') || lowerInput.includes('automatizaci√≥n')) {
        return "Para automatizaciones con n8n, primero genera tu flujo con nuestra herramienta, luego sigue los pasos de instalaci√≥n. Si necesitas ayuda espec√≠fica, contacta con alberto@desarroyo.tech üîß";
    }
    
    if (lowerInput.includes('web') || lowerInput.includes('sitio')) {
        return "Creamos webs HTML personalizadas en 48h. Responde nuestra encuesta inteligente y tendr√°s tu web lista en tiempo r√©cord! üåê";
    }
    
    if (lowerInput.includes('tiempo') || lowerInput.includes('d√≠as') || lowerInput.includes('entrega')) {
        return "Webs HTML: 48h. Automatizaciones: 1-3 d√≠as. Apps m√≥viles: 1-2 semanas. ¬°Siempre m√°s r√°pido de lo esperado! ‚ö°";
    }
    
    if (lowerInput.includes('contacto') || lowerInput.includes('email') || lowerInput.includes('hablar')) {
        return "¬°Perfecto! Escribe a alberto@desarroyo.tech para cualquier consulta. Te responderemos en menos de 24h üìß";
    }
    
    if (lowerInput.includes('servicios') || lowerInput.includes('ofrecen') || lowerInput.includes('hacen')) {
        return "Ofrecemos: webs HTML, automatizaciones n8n, apps m√≥viles, bots de WhatsApp/Telegram, IoT, y mucho m√°s. ¬°Somos tu taller digital completo! üõ†Ô∏è";
    }
    
    if (lowerInput.includes('superpoderes') || lowerInput.includes('ejemplos')) {
        return "Ejemplos de 'superpoderes': automatizar reservas de Airbnb, bots que responden consultas 24/7, apps que funcionan offline, sensores que alertan por Telegram... ¬°La tecnolog√≠a al servicio de tu vida! ü¶∏‚Äç‚ôÇÔ∏è";
    }
    
    // Respuesta gen√©rica
    return "¬°Hola! Soy Aura, tu asistente de DesArroyo.Tech. Puedo ayudarte con webs, automatizaciones, apps m√≥viles y m√°s. ¬øEn qu√© puedo asistirte? ü§ñ";
}

// Funci√≥n para manejar la entrada del usuario (actualizada)
async function handleUserInput(userInput) {
    addMessage(userInput, 'user-message');
    
    // Mostrar indicador de "Pensando..."
    const typingIndicator = document.createElement('div');
    typingIndicator.className = 'chat-message bot-message typing-indicator';
    typingIndicator.innerHTML = 'Pensando... <div class="loader"></div>';
    chatBody.appendChild(typingIndicator);
    chatBody.scrollTop = chatBody.scrollHeight;
    
    // Obtener la respuesta de la IA (sin temporizador)
    const botResponse = await getBotAnswer(userInput);
    
    // Quitar el indicador de "Pensando..."
    typingIndicator.remove();
    
    // Mostrar la respuesta del bot
    addMessage(botResponse, 'bot-message', true);
    
    // A√±adir botones de sugerencia (si no es premium)
    if (!userLimitInfo.isPremium) {
        setTimeout(() => {
            addQuickReplies();
        }, 500);
    }
}

// Funci√≥n para a√±adir mensajes al chat (mantener la existente)
function addMessage(message, className, isHTML = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `chat-message ${className}`;
    if (isHTML) {
        messageDiv.innerHTML = message;
    } else {
        messageDiv.textContent = message;
    }
    chatBody.appendChild(messageDiv);
    chatBody.scrollTop = chatBody.scrollHeight;
}

// Funci√≥n para a√±adir botones de respuesta r√°pida (mantener la existente)
function addQuickReplies() {
    const repliesContainer = document.createElement('div');
    repliesContainer.className = 'quick-replies';
    
    const quickReplies = [
        '¬øC√≥mo instalo el flujo en n8n?',
        '¬øCu√°nto cuesta una web personalizada?',
        '¬øQu√© otros servicios ofrecen?',
        '¬øPuedo pedir una automatizaci√≥n a medida?',
        'Dame ejemplos de "superpoderes"'
    ];
    
    quickReplies.forEach(replyText => {
        const replyBtn = document.createElement('button');
        replyBtn.className = 'quick-reply-btn';
        replyBtn.textContent = replyText;
        replyBtn.onclick = () => {
            handleUserInput(replyText);
            // Eliminar botones tras el uso
            const allReplies = document.querySelectorAll('.quick-replies');
            allReplies.forEach(r => r.remove());
        };
        repliesContainer.appendChild(replyBtn);
    });
    chatBody.appendChild(repliesContainer);
    chatBody.scrollTop = chatBody.scrollHeight;
}

// Funci√≥n para inicializar el chat (actualizada)
async function initializeChat() {
    // Cargar l√≠mite de usuario al inicializar
    await loadUserLimit();
    
    addMessage("¬°Hola! Soy Aura, tu asistente personal de DesArroyo.Tech. ¬øEn qu√© puedo ayudarte?", 'bot-message', true);
    
    // Mostrar opciones r√°pidas solo a usuarios no premium
    if (!userLimitInfo.isPremium) {
        addQuickReplies();
    }
}

// Verificar si hay pago exitoso en la URL
function checkForSuccessfulPayment() {
    const urlParams = new URLSearchParams(window.location.search);
    const sessionId = urlParams.get('session_id');
    
    if (sessionId) {
        confirmPayment(sessionId);
    }
}

// Exportar funciones para uso global
window.chatbot = {
    handleUserInput,
    addMessage,
    addQuickReplies,
    initializeChat,
    getBotAnswer,
    loadUserLimit,
    createPaymentSession
};

// --- INICIALIZACI√ìN DEL CHATBOT Y MANEJO DE EVENTOS ---
document.addEventListener('DOMContentLoaded', () => {
    const chatButton = document.getElementById('chat-button');
    const chatWidget = document.getElementById('chat-widget');
    const chatInput = document.getElementById('chat-input');
    const sendButton = document.getElementById('send-button');
    chatBody = document.getElementById('chat-body');

    console.log('üîç Verificando elementos del chatbot...');
    console.log('Elementos encontrados:', {
        chatButton: !!chatButton,
        chatWidget: !!chatWidget,
        chatInput: !!chatInput,
        sendButton: !!sendButton,
        chatBody: !!chatBody
    });

    if (chatButton && chatWidget && chatInput && sendButton && chatBody) {
        console.log('‚úÖ Todos los elementos encontrados, inicializando chatbot...');

        // 1. Abrir y cerrar el widget
        chatButton.addEventListener('click', async () => {
            console.log('üîÑ Abriendo/cerrando chat...');
            chatWidget.classList.toggle('open');
            
            if (chatWidget.classList.contains('open') && chatBody.children.length === 0) {
                console.log('üöÄ Inicializando chat por primera vez...');
                await initializeChat();
            }
            
            if (chatWidget.classList.contains('open')) {
                setTimeout(() => {
                    chatInput.focus();
                    console.log('üìù Input enfocado');
                }, 300);
            }
        });

        // 2. Funci√≥n para enviar mensaje
        async function sendMessage() {
            console.log('Funci√≥n sendMessage ejecutada');
            const message = chatInput.value.trim();
            console.log('Mensaje a enviar:', message);
            
            if (message !== '') {
                const allReplies = document.querySelectorAll('.quick-replies');
                allReplies.forEach(r => r.remove());
                
                await handleUserInput(message);
                chatInput.value = '';
                chatInput.style.height = 'auto'; // Resetear altura
                
                // Actualizar estado del bot√≥n
                sendButton.style.opacity = '0.5';
                sendButton.style.cursor = 'default';
                
                console.log('‚úÖ Mensaje enviado correctamente');
            } else {
                console.log('‚ùå Mensaje vac√≠o, no se env√≠a');
            }
        }

        // 3. Enviar mensaje con la tecla Enter
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                console.log('Enter presionado');
                sendMessage();
            }
        });

        // 4. Enviar mensaje con el bot√≥n
        console.log('üß™ A√±adiendo test directo al bot√≥n...');
        sendButton.onclick = function(e) {
            e.preventDefault();
            console.log('üß™ Test directo: Bot√≥n clickeado!');
            sendMessage();
        };

        // 5. Auto-resize del textarea
        chatInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 100) + 'px';
        });

        // 6. Habilitar/deshabilitar bot√≥n seg√∫n contenido
        chatInput.addEventListener('input', function() {
            const hasContent = this.value.trim() !== '';
            sendButton.style.opacity = hasContent ? '1' : '0.5';
            sendButton.style.cursor = hasContent ? 'pointer' : 'default';
        });

        // 7. Verificar pago exitoso
        checkForSuccessfulPayment();

        console.log('üéâ Chatbot inicializado correctamente');

    } else {
        console.error('‚ùå Elementos faltantes del chatbot:', {
            chatButton: !chatButton,
            chatWidget: !chatWidget,
            chatInput: !chatInput,
            sendButton: !sendButton,
            chatBody: !chatBody
        });
    }
}); 